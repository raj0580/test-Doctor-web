import { createUserWithEmailAndPassword, signInWithEmailAndPassword, sendPasswordResetEmail, RecaptchaVerifier, signInWithPhoneNumber, sendSignInLinkToEmail, isSignInWithEmailLink, signInWithEmailLink } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-auth.js";
import { doc, setDoc, serverTimestamp, getDoc } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-firestore.js";
import { auth, db } from './firebase-config.js';

const authModal = document.getElementById('auth-modal');
const authView = document.getElementById('auth-view');
const actionCodeSettings = { url: `${window.location.origin}/index.html`, handleCodeInApp: true };

// --- VIEW RENDERERS ---
function renderOptionsView() {
    authView.innerHTML = `<h3>Sign in Options</h3><div class="auth-options"><button id="show-email" class="cta-btn"><i class="icon-email"></i>Continue with Email</button><button id="show-phone" class="cta-btn"><i class="icon-phone"></i>Continue with Phone OTP</button></div>`;
    document.getElementById('show-email').addEventListener('click', renderEmailRegisterView);
    document.getElementById('show-phone').addEventListener('click', renderPhoneLoginView);
}
function renderEmailRegisterView() {
    authView.innerHTML = `<h3>Create Account or Login</h3><p class="error-message" id="auth-error"></p><input type="text" id="register-name" placeholder="Full Name" required><input type="tel" id="register-phone" placeholder="10-digit Phone Number" required><input type="email" id="register-email" placeholder="Email Address" required><button id="register-btn" class="cta-btn">Continue with Email</button><p class="auth-toggle-link"><a href="#" id="show-options">See other options</a></p>`;
    document.getElementById('show-options').addEventListener('click', e => { e.preventDefault(); renderOptionsView(); });
    document.getElementById('register-btn').addEventListener('click', handleEmailRegister);
}
function renderPhoneLoginView() {
    authView.innerHTML = `<h3>Login with Phone OTP</h3><p class="error-message" id="auth-error"></p><div class="phone-input-container"><span class="country-code">+91</span><input type="tel" id="phone-input" placeholder="10-digit number" maxlength="10"></div><div id="recaptcha-container"></div><button id="send-otp-btn" class="cta-btn">Send OTP</button><div id="otp-container" class="hidden"><p>Enter OTP</p><input type="text" id="otp-input" placeholder="6-digit OTP"><button id="verify-otp-btn" class="cta-btn">Verify OTP</button></div><p class="auth-toggle-link"><a href="#" id="show-options">See other options</a></p>`;
    document.getElementById('show-options').addEventListener('click', e => { e.preventDefault(); renderOptionsView(); });
    document.getElementById('send-otp-btn').addEventListener('click', handleSendOtp);
    document.getElementById('verify-otp-btn').addEventListener('click', handleVerifyOtp);
    setTimeout(() => {
        if (!window.recaptchaVerifier) {
            window.recaptchaVerifier = new RecaptchaVerifier(auth, 'recaptcha-container', { size: 'normal' });
            window.recaptchaVerifier.render();
        }
    }, 100);
}

// --- HANDLERS ---
async function handleEmailRegister() {
    const name = document.getElementById('register-name').value;
    const phone = document.getElementById('register-phone').value;
    const email = document.getElementById('register-email').value;
    const errorEl = document.getElementById('auth-error');
    if (!name || !email || !/^[6-9]\d{9}$/.test(phone)) { errorEl.textContent = 'All fields are required and phone must be valid.'; return; }
    try {
        await sendSignInLinkToEmail(auth, email, actionCodeSettings);
        window.localStorage.setItem('emailForSignIn', email);
        window.localStorage.setItem('newUserTempData', JSON.stringify({ name, phone }));
        authView.innerHTML = `<h3>Check your inbox</h3><p>A sign-in link has been sent to ${email}. Click the link to complete your registration or login.</p>`;
    } catch (error) { errorEl.textContent = getAuthErrorMessage(error); }
}
function handleSendOtp() {
    const tenDigitNumber = document.getElementById('phone-input').value.trim();
    if (!/^[6-9]\d{9}$/.test(tenDigitNumber)) { alert('Please enter a valid 10-digit number.'); return; }
    const phoneNumber = `+91${tenDigitNumber}`;
    const appVerifier = window.recaptchaVerifier;
    signInWithPhoneNumber(auth, phoneNumber, appVerifier)
        .then(confirmationResult => {
            window.confirmationResult = confirmationResult;
            document.getElementById('otp-container').classList.remove('hidden');
            alert('OTP Sent!');
        }).catch(error => { console.error("OTP Error:", error); alert("Failed to send OTP. Please solve reCAPTCHA."); });
}
async function handleVerifyOtp() {
    const code = document.getElementById('otp-input').value;
    if (!code || code.length !== 6) { alert('Please enter the 6-digit OTP.'); return; }
    try {
        const result = await window.confirmationResult.confirm(code);
        const user = result.user;
        const userDoc = await getDoc(doc(db, "users", user.uid));
        if (!userDoc.exists()) {
            const name = prompt("Welcome! Please enter your name.");
            const email = prompt("Please enter your email address for account recovery.");
            await setDoc(doc(db, "users", user.uid), { name: name, phone: user.phoneNumber, email: email, createdAt: serverTimestamp() });
        }
        closeAuthModal();
        window.location.reload();
    } catch (error) { alert("Invalid OTP or error signing in."); }
}
export async function handleEmailLinkSignIn() {
    if (isSignInWithEmailLink(auth, window.location.href)) {
        let email = window.localStorage.getItem('emailForSignIn');
        if (!email) { email = window.prompt('Please provide your email for confirmation'); }
        if (!email) return;
        try {
            const result = await signInWithEmailLink(auth, email, window.location.href);
            window.localStorage.removeItem('emailForSignIn');
            const user = result.user;
            const userDoc = await getDoc(doc(db, "users", user.uid));
            if (!userDoc.exists()) {
                const tempData = JSON.parse(window.localStorage.getItem('newUserTempData'));
                await setDoc(doc(db, "users", user.uid), { name: tempData.name, phone: `+91${tempData.phone}`, email: user.email, createdAt: serverTimestamp() });
                window.localStorage.removeItem('newUserTempData');
            }
            window.history.pushState(null, '', window.location.pathname);
            window.location.reload();
        } catch (error) { console.error(error); alert("Error signing in."); }
    }
}
export function showAuthModal() { renderOptionsView(); if (authModal) authModal.classList.remove('hidden'); }
export function closeAuthModal() { if (authModal) authModal.classList.add('hidden'); }
export function setupAuthListeners() {}
function getAuthErrorMessage(error) {
    switch (error.code) {
        case 'auth/invalid-email': return 'Please enter a valid email address.';
        case 'auth/user-not-found': case 'auth/wrong-password': return 'Invalid email or password.';
        case 'auth/email-already-in-use': return 'This email is already registered.';
        case 'auth/weak-password': return 'Password should be at least 6 characters.';
        default: return 'An unknown error occurred. Please try again.';
    }
}
/* --- Checkout Page Styles --- */
.checkout-page {
    padding-top: 60px; /* Space for fixed header */
}
.checkout-section {
    background: var(--card-bg);
    padding: 1.5rem;
    border-radius: var(--border-radius-lg);
    margin-bottom: 1.5rem;
    box-shadow: none;
    border: 1px solid var(--border-color);
}
.checkout-section h3 {
    margin-top: 0;
    margin-bottom: 1rem;
    font-size: 1.2rem;
    color: var(--secondary-color);
}
.address-card {
    line-height: 1.5;
}
.address-card strong {
    display: block;
    margin-bottom: 0.25rem;
}
.address-card p {
    margin: 0;
    color: var(--light-text);
}
.change-address-link {
    display: block;
    margin-top: 1rem;
    color: var(--primary-color);
    font-weight: 600;
    text-decoration: none;
}
.cart-item-card-mini {
    display: flex;
    align-items: center;
    gap: 1rem;
    padding-bottom: 1rem;
    margin-bottom: 1rem;
    border-bottom: 1px solid #f0f0f0;
}
.cart-item-card-mini:last-child {
    border-bottom: none;
    margin-bottom: 0;
    padding-bottom: 0;
}
.cart-item-card-mini img {
    width: 60px;
    height: 60px;
    object-fit: contain;
    background: #f1f1f1;
    border-radius: var(--border-radius-md);
}
.cart-item-card-mini .item-info {
    flex-grow: 1;
}
.cart-item-card-mini .item-info h4 {
    margin: 0;
    font-size: 1rem;
}
.cart-item-card-mini .item-info p {
    margin: 0.25rem 0 0;
    font-weight: 600;
    color: var(--text-color);
}
#pay-now-btn {
    width: 100%;
    margin-top: 1rem;
}
#pay-now-btn:disabled {
    background-color: var(--light-text);
    cursor: not-allowed;
}
/* --- Success Page Styles from style.css (for reference) --- */
.success-page { display: flex; justify-content: center; align-items: center; min-height: 80vh; text-align: center; }
.success-box { background: var(--card-bg); padding: 3rem; border-radius: var(--border-radius-lg); box-shadow: var(--shadow); }
.success-box h1 { color: var(--primary-color); }
.success-box p { color: var(--light-text); font-size: 1.1rem; }
.success-box .cta-btn { display: inline-block; text-decoration: none; margin-top: 2rem; padding: 1rem 2rem; }
.order-id-container { margin-top: 1.5rem; padding: 1rem; background-color: #f8f9fa; border-radius: var(--border-radius-md); border: 1px dashed var(--border-color); }
.order-id-container strong { display: block; margin-bottom: 0.5rem; color: var(--light-text); }
#order-id-display { font-weight: 600; font-size: 1.1rem; color: var(--secondary-color); }
.checkmark { width: 80px; height: 80px; border-radius: 50%; display: block; stroke-width: 2; stroke: #fff; stroke-miterlimit: 10; margin: 0 auto 20px; box-shadow: inset 0px 0px 0px #7ac142; animation: fill .4s ease-in-out .4s forwards, scale .3s ease-in-out .9s both; }
.checkmark__circle { stroke-dasharray: 166; stroke-dashoffset: 166; stroke-width: 2; stroke-miterlimit: 10; stroke: #7ac142; fill: none; animation: stroke .6s cubic-bezier(0.65, 0, 0.45, 1) forwards; }
.checkmark__check { transform-origin: 50% 50%; stroke-dasharray: 48; stroke-dashoffset: 48; animation: stroke .3s cubic-bezier(0.65, 0, 0.45, 1) .8s forwards; }
@keyframes stroke { 100% { stroke-dashoffset: 0; } }
@keyframes scale { 0%, 100% { transform: none; } 50% { transform: scale3d(1.1, 1.1, 1); } }
@keyframes fill { 100% { box-shadow: inset 0px 0px 0px 40px #7ac142; } }
